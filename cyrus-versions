#!/usr/bin/env perl

use warnings;
use strict;

use File::Basename;
use File::Find;

no warnings 'File::Find';

my @prefixes = (
    @ENV{qw( CYRUSDEFAULT_PREFIX
             CYRUSMURDER_PREFIX
             CYRUSREPLICA_PREFIX )},
    glob "/cyrus/*"
);

sub master_version
{
    return if basename($_) ne 'master';
    return if not -x $_;

    my ($version, @branches, @tags);

    $version = qx($_ -V 2>/dev/null);
    chomp $version;
    if (not $version) {
        print "unknown version\n";
        return;
    }

    if ($ENV{CYRUS_SOURCEDIR}
        && -d $ENV{CYRUS_SOURCEDIR}
        && $version =~ m/-g([0-9a-fA-F]*)(?:-dirty)?$/)
    {
        my $commit = $1;
        my $branch_cmd = "(cd $ENV{CYRUS_SOURCEDIR}"
                         . " && git branch --points-at $commit) 2>/dev/null";
        open my $in, '-|', $branch_cmd or die $!;
        while (<$in>) {
            if (m/^[* ] (.*)$/) {
                push @branches, $1;
            }
        }
        close $in;

        my $tags_cmd = "(cd $ENV{CYRUS_SOURCEDIR}"
                       . " && git tag --points-at $commit) 2>/dev/null";
        open $in, '-|', $tags_cmd or die $!;
        while (<$in>) {
            chomp;
            push @tags, $_;
        }
        close $in;
    }

    print "$version";
    if (scalar @branches) {
        print " \033[1;32m" . join(q{ }, @branches) . "\033[0m";
    }
    if (scalar @tags) {
        print " \033[1;33m" . join(q{ }, @tags) . "\033[0m";
    }
    print "\n";
}

my $whitespace = q{};

my $git_toplevel = qx(git rev-parse --show-toplevel 2>/dev/null);
chomp $git_toplevel;
if (defined $git_toplevel && basename($git_toplevel) eq 'cyrus-imapd') {
    print "$whitespace\033[1m$git_toplevel:\033[0m\n";
    system 'git describe --dirty=-dirty --match cyrus-imapd-*';
    $whitespace = qq{\n};
}

foreach my $p (grep { -d } @prefixes) {
    print "$whitespace\033[1m$p:\033[0m\n";

    find({ wanted => \&master_version, no_chdir => 1 }, $p);

    $whitespace = qq{\n};
}
